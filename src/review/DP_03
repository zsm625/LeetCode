class RobI {
    int[] dp;
    public int rob1(int[] nums) {
        //超时，加个备忘录试试
        int n = nums.length;
        dp = new int[n+1];
        Arrays.fill(dp,-666);
        return dp(nums,0);
    }

    public int dp(int[] nums,int start){
        if(start>=nums.length){
            return 0;
        }
        if(dp[start]!=-666){
            return dp[start];
        }
        int res = Math.max(dp(nums,start+1),dp(nums,start+2)+nums[start]);
        dp[start] = res;
        return dp[start];
    }
     public int rob2(int[] nums) {
     if(nums.length==0){
        return 0;
      }
        //动态规划 不用递归
        int[] dpp = new int[n+2];
        for(int i=nums.length-1;i>=0;i--）{
           dp[i] = Math.max(dp[i+1],dp[i+2]+nums[i]);
        }
        return dp[0];
    }
}
