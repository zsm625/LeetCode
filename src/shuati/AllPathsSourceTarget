class AllPathsSourceTarget {
    private List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        LinkedList<Integer> path = new LinkedList<>();
        traverse(graph,0,path);
        return res;
    }

    private void traverse(int[][] graph,int s,LinkedList<Integer> path){
        //图的遍历
        path.addLast(s); //添加访问节点
        int n = graph.length;
        if(s==n-1){
            //到达顶点
            res.add(new LinkedList(path));
        }
        for(int v:graph[s]){
            //遍历该节点相邻节点
            traverse(graph,v,path);
        }
        path.removeLast();
    }
    
    /** 图的遍历模板*/
    
    // DFS 算法，关注点在节点
void traverse(TreeNode root) {
    if (root == null) return;
    printf("进入节点 %s", root);
    for (TreeNode child : root.children) {
        traverse(child);
    }
    printf("离开节点 %s", root);
}

// 回溯算法，关注点在树枝
void backtrack(TreeNode root) {
    if (root == null) return;
    for (TreeNode child : root.children) {
        // 做选择
        printf("从 %s 到 %s", root, child);
        backtrack(child);
        // 撤销选择
        printf("从 %s 到 %s", child, root);
    }
}

}
