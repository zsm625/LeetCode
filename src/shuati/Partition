/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Partition {
    public ListNode partition(ListNode head, int x) {
        //思路：分隔链表，那就把小于X的节点与大于或者等于x的节点分开为两个链表，之后再将两个表合在一起
        ListNode bigger = new ListNode(-1);
        ListNode smaller = new ListNode(-1);
        ListNode b = bigger;
        ListNode s = smaller;
        ListNode res = s;
        //把一条链表分为两条链表 需注意的地方是，最后要将bigger节点的下一节点置为null，因为用的是原链表的引用，会造成循环链表
        while(head!=null){
            if(head.val>=x){
                bigger.next = head;
                bigger = bigger.next;
            }else{
                smaller.next = head;
                smaller = smaller.next;
            }
            // ListNode temp = head.next;
            // head.next = null;
            // head = temp;
            head = head.next;
        }
        bigger.next = null;
        smaller.next = b.next;
        return res.next;
    }
}
